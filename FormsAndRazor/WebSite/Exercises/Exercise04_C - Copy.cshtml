@{
	Page.Title = "Exercise 04 - Edit Info";
	Layout = "~/_Layout.cshtml";

	var db = Database.Open("ChinookDB");
	var cid = Request.QueryString["cid"];
	//capture which button was pressed
	var AlbumTitle = Request.Form["AlbumTitle"];
	var ArtistId = Request.Form["ArtistId"];
	var artName = Request.Form["artName"];
	var ReleaseYear = Request.Form["ReleaseYear"];
	var ReleaseLabel = Request.Form["ReleaseLabel"];
	var AlbumId = Request.Form["AlbumId"];

	var thebutton = Request.Form["theButton"];
	var queryStatement = "SELECT AlbumId, Title, ArtistId, ReleaseYear, ReleaseLabel "
		+ "FROM Albums "
		+ "WHERE AlbumId = @0";


	var queryProducts = db.QuerySingle(queryStatement, cid);
	if (string.IsNullOrEmpty(cid))
	{
		Response.Redirect("index.cshtml");
	}







}
@section head
{
	<br /><br />
	<h2>@artName - @AlbumTitle</h2>
}
<div>
	@section banner
	{
		<h2>Update/Delete Information</h2>
	}
	@if (IsPost)
	{


		if (thebutton.Equals("cancel"))
		{
			// cancel/clears
			//a)could redirect to search page
			//b)reset data to the current record for productid
			//c)empty the data fields.
			//for b and c you should also supply a message to the user
			AlbumId = ""; //as a minimum
			AlbumTitle = "";
			ArtistId = "";
			//artName = "";
			ReleaseYear = "";
			ReleaseLabel = "";
			<p>
				<span style="color:blue">
					User has cancel the action. Return to search for another product
				</span>
				<a href="~/Exercises/Exercise04_A.cshtml">go to search...</a>
			</p>
		}
		else if (thebutton.Equals("delete"))
		{
			//check is there a productid to delete
			//if not message to use to get new product
			//if present
			//  create delete command
			//  execute
			//  message
			//  wrap in try/catch
			if (string.IsNullOrEmpty(AlbumId))
			{
				<p>
					<span style="color:blue">
						No product selected. Return to search for another product
					</span>
					<a href="~/Exercises/Exercise04_A.cshtml">go to search...</a>
				</p>
			}
			else
			{
				try
				{
					//to physically remove the record from the database
					//var deletecommand = "DELETE Products WHERE ProductID = @0";

					//to flag a record to be ignore (deleted) do an update
					var deletecommand = "DELETE Albums WHERE AlbumId = @0";


					int results = db.Execute(deletecommand, AlbumId);
					if (results > 0)
					{
						<p>
							<span style="color:green">
								Product deleted.
							</span>
						</p>
						//optionally clear the fields.
						AlbumId = ""; //as a minimum
						AlbumTitle = "";
						ArtistId = "";
						//artName = "";
						ReleaseYear = "";
						ReleaseLabel = "";
					}
					else
					{
						<p>
							<span style="color:blue">
								Delete failed. No product called @AlbumTitle with an id of @AlbumId on file.
							</span>
						</p>
					}

				}
				catch (Exception ex)
				{
					<p>
						<span style="color:blue">
							Deleted failed. Error @ex.Message
						</span>

					</p>
				}
			}
		}
		else
		{
			//make connection
			if (string.IsNullOrEmpty(AlbumId))
			{
				<p>
					<span style="color:blue">
						No product selected. Return to search for another product
					</span>
					<a href="~/Exercises/Exercise04_A.cshtml">go to search...</a>
				</p>
			}
			else
			{
				if (Validation.IsValid())
				{
					try
					{
						//update
						var updatecommand = "UPDATE Albums "
									+ "SET Title = @0, "
									+ "ArtistId = @1, "
									+ "ReleaseYear = @2, "
									+ "ReleaseLabel = @3 "
									+ "WHERE AlbumId = @4";


						//this isnt working because ints and strings? i need to figure out how to pass these arguments to fit in the parameters
						int results = db.Execute(updatecommand, AlbumTitle,
							ArtistId == "0" ? null : ArtistId,
							string.IsNullOrEmpty(artName) ? null : artName,
							string.IsNullOrEmpty(ReleaseYear) ? null : ReleaseYear,
							string.IsNullOrEmpty(ReleaseLabel) ? null : ReleaseLabel,
							AlbumId == "0" ? null : AlbumId);
						if (results > 0)
						{
							<p>
								<span style="color:green">
									Product updated.
								</span>
							</p>
						}
						else
						{
							<p>
								<span style="color:blue">
									Update failed. No product called @AlbumTitle with an id of @AlbumId on file.
								</span>
							</p>
						}
					}
					catch (Exception ex)
					{
						<p>
							<span style="color:blue">
								Deleted failed. Error @ex.Message
							</span>

						</p>
					}
				}
			}
		}
	}
	else
	{   // this is where i put the stuff before button searchings
		queryProducts = db.QuerySingle(queryStatement, cid);
		//	var querycommand = "SELECT Title FROM Albums WHERE AlbumId = @0";
		//	AlbumTitle = db.QueryValue(querycommand, cid).ToString();

		//	querycommand = "SELECT ArtistId FROM Albums WHERE AlbumId = @0";
		//	ArtistId = db.QueryValue(querycommand, cid).ToString();
		//	querycommand = "SELECT Name from Artists WHERE ArtistId = @0";
		//	artName = db.QueryValue(querycommand, ArtistId).ToString();


		//	querycommand = "SELECT ReleaseYear FROM Albums WHERE AlbumId = @0";
		//	ReleaseYear = db.QueryValue(querycommand, cid).ToString();

		//	querycommand = "SELECT ReleaseLabel FROM Albums WHERE AlbumId = @0";
		//	ReleaseLabel = db.QueryValue(querycommand, cid).ToString();

		//	querycommand = "SELECT AlbumId FROM Albums WHERE AlbumId = @0";
		//	AlbumId = db.QueryValue(querycommand, cid).ToString();

		//	querycommand = "SELECT ArtistId, AlbumId, Title, ReleaseYear, ReleaseLabel FROM Albums WHERE AlbumId = @0 "
		//+ "ORDER BY Title";
		AlbumTitle = queryProducts.Title == null ? "" : queryProducts.Title.ToString();

		ArtistId = queryProducts.ArtistId.ToString();
		ReleaseLabel = queryProducts.ReleaseLabel;
		ReleaseYear = queryProducts.ReleaseYear == null ? "0" : queryProducts.ReleaseYear.ToString();
		AlbumId = queryProducts.AlbumId == null ? "0" : queryProducts.AlbumId.ToString();
		//var Name = db.Query(querycommand, cid);
	}

	<form id="theForm" action="" method="post">
		<div class="row">
			<div class="col-md-5 text-right">
				<label for="AlbumTitle">Title:&nbsp;</label>
				<input type="text" id="Title" name="Title" value="@AlbumTitle" />
				<br />

				<label for="ArtistId">ArtistId:&nbsp;</label>
				<input type="text" id="ArtistId" name="ArtistId" value="@ArtistId" />
				<br />
				@*<label for="artName">artName:&nbsp;</label>
					<input type="text" id="artName" name="artName" value="@artName" />
					<br />*@

				<label for="ReleaseYear">ReleaseYear:&nbsp;</label>
				<input type="text" id="ReleaseYear" name="ReleaseYear" value="@ReleaseYear" />
				<br />

				<label for="ReleaseLabel">ReleaseLabel:&nbsp;</label>
				<input type="text" id="ReleaseLabel" name="ReleaseLabel" value="@ReleaseLabel" />
				<br />

				<label for="AlbumId">AlbumId:&nbsp;</label>
				<input type="text" id="AlbumId" name="AlbumId" value="@AlbumId" />
				<br /><br />

			</div>

		</div>
		<div class="row">
			<div class="col-md-5 text-right">
				<button type="submit" name="theButton" id="theUpdate" class="btn btn-primary" value="update">Update</button>&nbsp;&nbsp;&nbsp;
				<button type="submit" name="theButton" id="theDelete" class="btn btn-primary" value="delete" formnovalidate>Delete</button>&nbsp;&nbsp;&nbsp;
				<button type="submit" name="theButton" id="theCancel" class="btn btn-primary" value="cancel" formnovalidate>Cancel</button>
			</div>
		</div>
		<script type="text/javascript">
		document.getElementById("theDelete").onclick = ConfirmDelete;
		function ConfirmDelete() {
		return confirm("Are you sure you want to remove @AlbumId");
		}
		</script>
	</form>

	@section footer
	{

	}

</div>